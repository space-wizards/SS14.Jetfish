@using SS14.Jetfish.Helpers
@using SS14.Jetfish.Security.Repositories
@using SS14.Jetfish.Components.Pages.User
@inherits LayoutComponentBase

@* Required *@
<Theme />
<MudPopoverProvider />

@* Needed for dialogs *@
<MudDialogProvider />

@* Needed for snackbars *@
<MudSnackbarProvider />

<CascadingValue Value="@User" TValue="User">
    <MudLayout>
        <MudAppBar>
            <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())"/>
            <MudSpacer/>
            <MudText HtmlTag="h2" Typo="Typo.h5" Class="mx-4">
                <SectionOutlet SectionName="page-title"/>
            </MudText>
            <MudSpacer/>
            <MudMenu>
                <ActivatorContent>
                    <UserAvatar/>
                </ActivatorContent>
                <ChildContent>
                    <MudMenuItem Label="Settings" Href="/user/settings"/>
                    <MudMenuItem Label="Logout" Href="/logout" />
                </ChildContent>
            </MudMenu>
        </MudAppBar>
        <MudDrawer @bind-Open="_drawerOpen" Elevation="2">
            <NavigationMenu/>
        </MudDrawer>
        <MudMainContent>
            <MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="pt-4">@*style="overflow: auto;max-height: 100vh;"*@
                @Body
            </MudContainer>
        </MudMainContent>
    </MudLayout>
</CascadingValue>

<div id="blazor-error-ui" data-nosnippet>
    An unhandled error has occurred.
    <a href="." class="reload">Reload</a>
    <span class="dismiss">🗙</span>
</div>

@code {
    private bool _drawerOpen = false;

    private void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    private User? User { get; set; } = null;

    [CascadingParameter]
    private Task<AuthenticationState>? AuthenticationState { get; set; }

    [Inject]
    private UserRepository UserRepository { get; set; } = null!;

    protected override async Task OnParametersSetAsync()
    {
        if (AuthenticationState == null || User != null)
            return;

        await AuthenticationState;
        var userId = AuthenticationState.Result.User.Claims.GetUserId();
        if (!userId.HasValue)
            throw new InvalidOperationException("UserId is null");

        User = await UserRepository.GetAsync(userId.Value);
    }
}
