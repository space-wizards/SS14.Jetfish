@page "/projects/{projectId:guid}"
@using SS14.Jetfish.Core.Extensions
@using SS14.Jetfish.Projects.Model
@attribute [AllowAnonymous]

@if (_isLoading)
{
    <MudProgressCircular Color="Color.Secondary" Indeterminate="true" Class="loading-spinner"/>
    return;
}

@if(Project == null)
{
    <p>Project not found</p>
    return;
}

<AuthorizeResource Override="@Project.Public" ResourceName="project" Policy="@(nameof(Permission.ProjectRead))" Resource="@ProjectId" DisplayError="true">
    <PageTitle>@Project.Name</PageTitle>
    <SectionContent SectionName="page-title">@Project.Name</SectionContent>
    <SectionContent SectionName="page-tools">
        <AuthorizeResource ResourceName="project" Policy="@(nameof(Permission.ProjectEdit))" Resource="@ProjectId" DisplayError="false">
            <MudButton Variant="Variant.Text" EndIcon="@Icons.Material.Filled.Edit" OnClick="OpenEditDialog">Edit project</MudButton>
        </AuthorizeResource>
    </SectionContent>

    @if (Project.BackgroundSpecifier == ProjectBackgroundSpecifier.Image && !_isImageLoaded)
    {
        <!-- We load the image here to detect when it finishes loading into the browser cache, to then set the background -->
        <img src="project-file/@Project.Id/file/@Project.Background"
             style="display:none"
             @onload="OnImageLoaded"/>
    }

    <div class="project-background" style="@GetBackground()">
        <MudSkeleton Style="@(_displaySkeleton ? "transform: none;" : "display: none;")" Width="100%" Height="100%" Animation="Animation.Wave" Class="skeleton-no-transform"/>
    </div>
    <div style="display:contents;">
        <div class="board-container">
            <MudDropContainer T="TaskItem" @ref="_dropContainer" ItemsSelector="@((item, s) => item.ListTitle == s)" Items="@_tasks" ItemDropped="CardUpdated" Class="board">
            <ChildContent>
                @foreach (var item in _sections)
                {
                    <MudPaper Elevation="0" Class="lane-row">
                        <MudToolBar Gutters="false">
                            @if (item.EditLaneOpen)
                            {
                                <MudTextField Error="@(item.EditLaneError != null)" ErrorText="@item.EditLaneError" OnBlur="@(() => SetLaneName(item))" AutoFocus="true" MaxLength="Lane.ListTitleMaxLength" @bind-Value="@item.EditLaneName" AdornmentIcon="@Icons.Material.Filled.Edit"></MudTextField>
                            }
                            else
                            {
                                <MudText Style="cursor: pointer;" Typo="Typo.subtitle1" @onclick="@(args => item.EditLaneOpen = true)"><b>@item.BackingLane.Title</b></MudText>
                            }
                            <MudSpacer/>
                            <MudMenu Icon="@Icons.Material.Rounded.MoreHoriz" AnchorOrigin="Origin.BottomRight" TransformOrigin="Origin.TopRight" ListClass="pa-2 d-flex flex-column" PopoverClass="mud-elevation-25">
                                <AuthorizeResource DisplayError="false" Policy="@(nameof(Permission.ProjectEdit))" Resource="ProjectId">
                                    <MudButton Size="Size.Small" Color="Color.Error" StartIcon="@Icons.Material.Outlined.Delete" OnClick="@(args => DeleteSection(item))">Delete section</MudButton>
                                </AuthorizeResource>
                            </MudMenu>
                        </MudToolBar>
                        <AuthorizeResource DisplayError="false" Policy="@(nameof(Permission.ProjectCardCreate))" Resource="ProjectId">
                            @if (item.NewTaskOpen)
                            {
                                <MudPaper Elevation="25" Class="pa-2 rounded-lg">
                                    <MudTextField @bind-Value="item.NewTaskName" Placeholder="New Task" Underline="false" Margin="Margin.Dense" Class="mx-2 mt-n2"></MudTextField>
                                    <MudButton OnClick="@(() => AddTask(item))" Size="Size.Small" Color="Color.Primary" FullWidth="true">Add task</MudButton>
                                </MudPaper>
                            }
                            else
                            {
                                <MudButton OnClick="@(() => item.NewTaskOpen = !item.NewTaskOpen)" StartIcon="@Icons.Material.Filled.Add" FullWidth="true" Class="rounded-lg py-2">Add task</MudButton>
                            }
                        </AuthorizeResource>
                        <MudDropZone CanDrop="CheckCanDragAndDrop" T="TaskItem" Identifier="@item.BackingLane.Title" Style="min-height: 10px" AllowReorder="true" Class="mud-height-full" />
                    </MudPaper>
                }

                <AuthorizeResource DisplayError="false" Policy="@(nameof(Permission.ProjectEdit))" Resource="ProjectId">
                    <MudPaper Class="lane-row" Elevation="0">
                        @if (_addSectionOpen)
                        {
                            <MudPaper Elevation="0" Width="224px" Class="pa-4 d-flex flex-column mud-background-gray rounded-lg">
                                <EditForm Model="@_newSectionModel" OnValidSubmit="OnValidSectionSubmit">
                                    <DataAnnotationsValidator />
                                    <MudTextField @bind-Value="_newSectionModel.Name" For="@(() => _newSectionModel.Name)" Placeholder="New section" Underline="false"></MudTextField>
                                    <MudButton ButtonType="ButtonType.Submit" Size="Size.Small" Color="Color.Primary" FullWidth="true">Add section</MudButton>
                                </EditForm>
                            </MudPaper>
                        }
                        else
                        {
                            <MudButton OnClick="OpenAddNewSection" Variant="Variant.Outlined" StartIcon="@Icons.Material.Filled.Add" Color="Color.Primary" Class="rounded-lg py-2" FullWidth="true">Add section</MudButton>
                        }
                    </MudPaper>
                </AuthorizeResource>
            </ChildContent>

            <ItemRenderer>
                <MudCard Style="margin: 6px; overflow: clip" @onclick="@(() => OpenCard(context))">
                    <MudCardContent>
                        <MudText Typo="Typo.h6">@context.Title</MudText>
                        @if (context.Description != null)
                        {
                            <MudText Typo="Typo.body2">@context.Description.Truncate(400)</MudText>
                        }
                    </MudCardContent>
                </MudCard>
            </ItemRenderer>
        </MudDropContainer>
        </div>
    </div>
</AuthorizeResource>
