@page "/admin/policies"

@using SS14.Jetfish.Core.Commands
@using SS14.Jetfish.Core.Services.Interfaces
@using SS14.Jetfish.Core.Types
@using SS14.Jetfish.Security
@using SS14.Jetfish.Security.Commands
@using SS14.Jetfish.Security.Repositories

@attribute [Authorize(Policy = nameof(Permission.PoliciesRead))]

@inject PolicyRepository PolicyRepository
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject ICommandService CommandService
@inject NavigationManager NavigationManager

<h3>Policies</h3>

<div style="display:contents">
    <MudPaper Class="p-4">
    <MudTable
        Items="_roles"
        Hover="true"
        Height="600"
        FixedHeader="true"
        FixedFooter="true"
        >
        <ToolBarContent>
            <MudText Typo="Typo.h6">Global Policies</MudText>
            <MudSpacer />
        </ToolBarContent>
        <HeaderContent>
            <MudTh>Name</MudTh>
            <MudTh>IDP Mapping</MudTh>
            <MudTh Class="fixed-column-policies">Policies</MudTh>
            <MudTh Class="fixed-column-action"></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd>
                <div class="fixed-column-scroll">
                    @context.DisplayName
                </div>
            </MudTd>
            <MudTd>
                <div class="fixed-column-scroll">
                    @context.IdpName
                </div>
            </MudTd>
            <MudTd Class="fixed-column-policies">
                <MudExpansionPanels>
                    <MudExpansionPanel Expanded="true" Text="Permissions">
                        <TitleContent>
                            @if (_editMode)
                            {
                                <MudIconButton OnClick="args => AddPolicy(context)" Icon="@Icons.Material.Filled.Add"/>
                            }
                        </TitleContent>
                        <ChildContent>
                            <MudList Dense="true" T="object">
                                @foreach (var policy in context.Policies)
                                {
                                    <MudListItem T="object">
                                        <div class="permissions-container">
                                            <div>
                                                <MudText>@policy.AccessPolicy.Name</MudText>
                                                <MudText>@PermissionExtensions.GetPolicyNames(policy.AccessPolicy.Permissions.ToArray())</MudText>
                                            </div>
                                            @if (_editMode)
                                            {
                                                <div>
                                                    <MudIconButton OnClick="@((e) => EditPolicy(policy.AccessPolicy, context))" Icon="@Icons.Material.Filled.Edit"/>
                                                    <MudIconButton OnClick="@((e) => DeletePolicy(policy, context))" Icon="@Icons.Material.Filled.DeleteForever" Color="Color.Error"/>
                                                </div>
                                            }
                                        </div>
                                    </MudListItem>
                                }
                            </MudList>
                        </ChildContent>
                    </MudExpansionPanel>
                </MudExpansionPanels>
            </MudTd>
            <MudTd Class="fixed-column">
                @if (_editMode)
                {
                    <MudIconButton Icon="@Icons.Material.Filled.Edit" OnClick="@((e) => EditRole(context))"/>
                    <MudIconButton Icon="@Icons.Material.Filled.DeleteForever" Color="Color.Error" OnClick="@((e) => DeleteRole(context))" />
                }
            </MudTd>
        </RowTemplate>
    </MudTable>
</MudPaper>
</div>

<AuthorizeResource DisplayError="false" Policy="@nameof(Permission.PoliciesWrite)">
    <MudButtonGroup Color="Color.Primary" Size="Size.Medium" Variant="Variant.Filled" Class="mt-2">
        <MudButton OnClick="CreateRole" Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add">
            Create Role
        </MudButton>
        <MudButton OnClick="ToggleEdit" Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Edit">
            Toggle Edit
        </MudButton>
    </MudButtonGroup>
</AuthorizeResource>

@code {
    private IEnumerable<Role> _roles = [];

    protected override void OnInitialized()
    {
        _roles = PolicyRepository.GetAllGlobal();
    }

    private async Task CreateRole()
    {
        var options = new DialogOptions
        {
            CloseOnEscapeKey = true,
        };
        var dialog = await DialogService.ShowAsync<RoleDialog>("Add Role", options);
        var result = await dialog.Result;

        if (result == null || result.Canceled)
            return;

        await SaveChangesUpdate((Role) result.Data!);
    }

    private bool _editMode = false;

    private void ToggleEdit()
    {
        _editMode = !_editMode;
        StateHasChanged();
    }

    private async Task EditRole(Role role)
    {
        var parameters = new DialogParameters<RoleDialog> { { x => x.Role, role } };

        var options = new DialogOptions
        {
            CloseOnEscapeKey = true,
        };
        var dialog = await DialogService.ShowAsync<RoleDialog>("Edit Role", parameters, options);
        var result = await dialog.Result;

        if (result == null || result.Canceled)
            return;

        await SaveChangesUpdate((Role) result.Data!);
    }

    private async Task SaveChangesUpdate(Role role)
    {
        var command = new CreateOrUpdateRoleCommand(role);
        var commandResult = await CommandService.Run(command);
        await SaveChangesFinal(commandResult);
    }

    private async Task SaveChangesFinal(ICommand<Result<Role, Exception>>? commandResult)
    {
        if (!commandResult!.Result!.IsSuccess)
        {
            await DialogService.ShowMessageBox(
                "Error",
                "The resource has been modified by someone else. Please reload the page to restore state.",
                yesText: "Reload Page"
            );

            NavigationManager.Refresh(true);
        }

        Snackbar.Add("Changes Saved!", Severity.Success);
        _roles = PolicyRepository.GetAllGlobal();
        StateHasChanged();
    }

    private async Task EditPolicy(AccessPolicy policy, Role role)
    {
        if (!_editMode)
            return;

        var parameters = new DialogParameters<PolicyDialog> {
        {
            x => x.Role, role
        },
        {
            x => x.PolicyId, policy.Id
        } };

        var options = new DialogOptions
        {
            CloseOnEscapeKey = true,
        };
        var dialog = await DialogService.ShowAsync<PolicyDialog>("Edit Policy", parameters, options);
        var result = await dialog.Result;

        if (result == null || result.Canceled)
            return;

        await SaveChangesUpdate((Role) result.Data!);
    }

    private async Task DeletePolicy(ResourcePolicy policyAccessPolicy, Role context)
    {
        if (!await ConfirmDelete())
            return;

        context.Policies.Remove(policyAccessPolicy);
        await SaveChangesUpdate(context);
    }

    private async Task DeleteRole(Role context)
    {
        if (!await ConfirmDelete())
            return;

        var command = new DeleteRoleCommand(context);
        var commandResult = await CommandService.Run(command);
        await SaveChangesFinal(commandResult);
    }

    private async Task<bool> ConfirmDelete()
    {
        var result = await DialogService.ShowMessageBox(
            "Warning",
            "Deleting can not be undone!",
            yesText:"Delete!", cancelText:"Cancel");

        if (!result.HasValue || !result.Value)
            return false;

        return true;
    }

    private async Task AddPolicy(Role context)
    {
        if (!_editMode)
            return;

        var parameters = new DialogParameters<PolicyDialog> {
            {
                x => x.Role, context
            }};

        var options = new DialogOptions
        {
            CloseOnEscapeKey = true,
        };
        var dialog = await DialogService.ShowAsync<PolicyDialog>("Add Policy", parameters, options);
        var result = await dialog.Result;

        if (result == null || result.Canceled)
            return;

        await SaveChangesUpdate((Role) result.Data!);
    }
}