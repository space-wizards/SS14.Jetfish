@using System.Diagnostics
@using SS14.Jetfish.Helpers
<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.Create" Class="mr-3 mb-n1"/>
            @MudDialog.Title
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudTextField
            T="string"
            Placeholder="Name..."
            Label="Name"
            Required="true"
            @bind-Value="@_policyName"
            Counter="AccessPolicy.AccessPolicyMaxNameLength"
            Immediate="true"
            Validation="@(new Func<string, IEnumerable<string>>(MaxCharactersPolicyName))"
            HelperText="The name of this policy."
        />

        <MudSelect T="Permission"
                   Label="Select Permissions"
                   MultiSelection="true"
                   @bind-SelectedValues="_permissions">
            @foreach (var option in Enum.GetValues(typeof(Permission)).Cast<Permission>())
            {
                <MudSelectItem Value="option">@option</MudSelectItem>
            }
        </MudSelect>

        <MudCheckBox T="bool" @bind-Value="_teamAssignable" Label="Team assignable"/>
        <MudText Typo="Typo.caption">Allow this policy to be used for team roles. Keep this disabled for admin policies.</MudText>
        
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Success" OnClick="Save">Save</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter]
    private IMudDialogInstance MudDialog { get; set; } = null!;

    [Parameter]
    public AccessPolicy Policy { get; set; } = new();
    
    private IEnumerable<Permission> _permissions = new List<Permission>();
    private string _policyName = "";
    private bool _teamAssignable;

    protected override void OnParametersSet()
    {
        _permissions = Policy.Permissions;
        _policyName = Policy.Name;
        _teamAssignable = Policy.TeamAssignable;
    }

    private IEnumerable<string> MaxCharactersPolicyName(string ch) => BlazorUtility.MaxCharacters(ch, AccessPolicy.AccessPolicyMaxNameLength);

    private void Cancel() => MudDialog.Cancel();

    private void Save()
    {
        if (string.IsNullOrEmpty(_policyName)
            || _policyName.Length > AccessPolicy.AccessPolicyMaxNameLength
            )
            return;

        Debug.Assert(Policy != null, "Attempted to save policy with uninitialized component!");

        Policy.Permissions = _permissions.ToList();
        Policy.Name = _policyName;
        Policy.TeamAssignable = _teamAssignable;
        
        MudDialog.Close(DialogResult.Ok(Policy));
    }
}