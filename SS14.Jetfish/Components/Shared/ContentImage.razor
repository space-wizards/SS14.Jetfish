@using SS14.Jetfish.Database
@using SS14.Jetfish.FileHosting
@using SS14.Jetfish.FileHosting.Model

@inherits MudComponentBase

@if (!_isVideo)
{
    <MudImage
        Class="@Class"
        Style="@Style"
        Src="@GetUrl()"
        data-activate-on-hover="@(ActivateOnHover ? "true" : "false")"
        data-active-url="@GetActiveUrl()"
        data-inactive-url="@GetUrl()"
        Alt="@Alt"
        Height="@Height"
        Width="@Width"
        Fluid="@Fluid">
    </MudImage>
}
else
{
    <video muted loop width="100%" class="content-video @Class" style="@Style" @attributes="GetAutoplay()"
           data-play-on-hover="@(ActivateOnHover ? "true" : "false")">
        <source src="@GetUrl()" type="@_mimeType" />
        @Alt
    </video>
}

@code {

    [Inject]
    private ApplicationDbContext DbContext { get; set; } = null!;

    [CascadingParameter]
    public User? User { get; set; }

    /// <summary>
    /// The type of image source being used
    /// </summary>
    [Parameter]
    public FileType Type { get; set; } = FileType.Global;

    /// <summary>
    /// The image source path
    /// </summary>
    [Parameter]
    public Guid? FileId { get; set; }

    /// <summary>
    /// The project id used if the <see cref="Type"/> parameter is set FileType.Project.<br/>
    /// </summary>
    [Parameter]
    public Guid? ProjectId { get; set; }

    [Parameter]
    public bool Fluid { get; set; }

    [Parameter]
    public string? Alt { get; set; }

    [Parameter]
    public int? Height { get; set; }

    [Parameter]
    public int? Width { get; set; }

    [Parameter]
    public bool ActivateOnHover { get; set; } = true;

    private string? _mimeType;
    private bool _isVideo;

    protected override void OnParametersSet()
    {
        if (!FileId.HasValue)
            return;

        _mimeType = DbContext.UploadedFile
            .Where(x => x.Id.Equals(FileId.Value))
            .Select(x => x.MimeType)
            .SingleOrDefault();

        _isVideo = _mimeType?.StartsWith("video") ?? false;
    }

    private Dictionary<string, object> GetAutoplay()
    {
        if (User?.SettingAlwaysPlayAnimatedMedia ?? false)
            return new Dictionary<string, object> { { "autoplay", "true" } };


        return new Dictionary<string, object>();
    }

    private string GetUrl()
    {
        if (!FileId.HasValue)
            return string.Empty;

        if (Type is FileType.Project)
            return $"{Type.FileTypeUrl()}/{ProjectId}/file/{FileId.Value}?{GetLabelParameter()}";

        return $"{Type.FileTypeUrl()}/{FileId.Value}?{GetLabelParameter()}";
    }

    private string GetActiveUrl()
    {
        if (!FileId.HasValue)
            return string.Empty;

        if (Type is FileType.Project)
            return $"{Type.FileTypeUrl()}/{ProjectId}/file/{FileId.Value}?{GetHoverLabelParameter()}";

        return $"{Type.FileTypeUrl()}/{FileId.Value}?{GetHoverLabelParameter()}";
    }

    private string GetLabelParameter() => _mimeType switch
    {
        "image/gif" => "label=static",
        _ => "",
    };

    private string GetHoverLabelParameter() => _mimeType switch
    {
        _ => "",
    };

}
